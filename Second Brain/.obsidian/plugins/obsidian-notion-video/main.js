/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => NotionPlugin
});
var import_obsidian = __toModule(require("obsidian"));

// notion.ts
var https = require("https");
var Notion = class {
  constructor(secret) {
    this.secret = secret;
  }
  getVideoURL(block_id) {
    return __async(this, null, function* () {
      const options = {
        hostname: "api.notion.com",
        port: 443,
        path: `/v1/blocks/${block_id}`,
        method: "GET",
        headers: {
          "Accept": "application/json",
          "Notion-Version": "2022-02-22",
          "Authorization": `Bearer ${this.secret}`
        }
      };
      return new Promise((resolve, reject) => {
        const req = https.get(options, (res) => {
          const buffers = [];
          res.on("data", (data) => {
            buffers.push(data);
          });
          res.on("end", () => {
            var _a, _b;
            const buffer = Buffer.concat(buffers);
            const res2 = JSON.parse(buffer.toString());
            resolve((_b = (_a = res2 == null ? void 0 : res2.video) == null ? void 0 : _a.file) == null ? void 0 : _b.url);
          });
        });
        req.on("err", (err) => {
          reject(err);
        });
      });
    });
  }
};
var notion_default = Notion;

// main.ts
var DEFAULT_SETTINGS = {
  secret: ""
};
var NotionPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      const notion = new notion_default(this.settings.secret);
      this.cached = new Set();
      this.addCommand({
        id: "Add Video From Notion",
        name: "Add Video From Notion",
        editorCallback: (editor, view) => __async(this, null, function* () {
          new VideoModal(this.app, (block_id) => __async(this, null, function* () {
            try {
              const url = yield notion.getVideoURL(block_id);
              if (url) {
                editor.replaceRange(`<video controls src="${url}" data-block-id="${block_id}"></video>`, editor.getCursor());
                new import_obsidian.Notice("Insert video success");
              } else {
                new import_obsidian.Notice("It's not a video block");
              }
            } catch (err) {
              console.error(err);
              new import_obsidian.Notice("Network error happens");
            }
          })).open();
        })
      });
      this.addSettingTab(new SampleSettingTab(this.app, this));
      this.registerEvent(this.app.workspace.on("file-open", (file) => __async(this, null, function* () {
        if ((file == null ? void 0 : file.extension) === "md") {
          if (this.cached.has(file.path)) {
            return;
          }
          this.cached.add(file.path);
          const { vault } = this.app;
          const data = yield vault.read(file);
          const newdata = yield this.findVideoAndReplace(data, notion);
          if (data === newdata) {
            return;
          }
          yield vault.modify(file, newdata);
          new import_obsidian.Notice("Update Video URL Success!");
        }
      })));
    });
  }
  findVideoAndReplace(data, notion) {
    return __async(this, null, function* () {
      const reg = /<video.*data-block-id="(?<id>[^"]*)".*><\/video>/g;
      let res;
      while (res = reg.exec(data)) {
        const block_id = res.groups.id;
        if (!block_id) {
          continue;
        }
        const url = yield notion.getVideoURL(block_id);
        if (url) {
          data = data.replace(res[0], `<video controls src="${url}" data-block-id="${block_id}"></video>`);
        }
      }
      return data;
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var VideoModal = class extends import_obsidian.Modal {
  constructor(app, callback) {
    super(app);
    this.block_id = "";
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", {
      text: "Input your video block_id"
    });
    new import_obsidian.Setting(contentEl).setName("block_id").addText((text) => {
      text.onChange((block_id) => {
        this.block_id = block_id;
      });
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("OK").onClick(() => {
        this.close();
        this.callback(this.block_id);
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Notion Plugin." });
    new import_obsidian.Setting(containerEl).setName("Notion intergration secret").setDesc("It's a intergration secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.secret).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.secret = value;
      yield this.plugin.saveSettings();
    })));
  }
};
